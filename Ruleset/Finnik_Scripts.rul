extended:
  tags:
    # RuleItem: #in case of emergency
    #   FTAG_DAZE_VALUE: int
    #   FTAG_DAZE_TIME: int
    #   FTAG_TOPSIKER_ADD_POWER: int
    #   FTAG_POISON_VALUE: int
    #   FTAG_POISON_TIME: int
    # RuleArmor:
    #   FTAG_ROTTINGMIN: int
    #   FTAG_ROTTINGMAX: int
    #   FTAG_FLASHBANG_RESISTANCE: int
    BattleUnit:
      FTAG_ISDAZED: int
      LAST_HIT_FRAME: int
      FTAG_DAZE_ENDTURN: int
      FTAG_DAZE_ORIGINAL_TIMEUNITS: int
      FTAG_DAZE_ORIGINAL_REACTIONS: int
      FTAG_DAZE_ORIGINAL_FIRING: int
      FTAG_DAZE_ORIGINAL_THROWING: int
      FTAG_DAZE_ORIGINAL_MELEE: int
      FTAG_POISON_DAMAGE: int
      FTAG_POISON_ENDTURN: int

  scripts:
    damageUnit:
      - offset: 1 #Flashbang damage script
        code: |
          var ptr RuleItem itemRuleset;
          var ptr RuleArmor armor_rule;
          var int dazeTag;
          var int animFrame;
          var int susceptibility;
          var int applyChance;
          var int dazeValue;
          var int statValue;
          var int debuffValue;
          var int dazeTime;
          var int endTurn;

          damaging_item.getRuleItem itemRuleset; #get debuff stats from item
          itemRuleset.getTag dazeValue Tag.FTAG_DAZE_VALUE;
          itemRuleset.getTag dazeTime Tag.FTAG_DAZE_TIME;
          if eq dazeValue 0; # Make sure item has daze effect
            return;
          end;          

          unit.getTag dazeTag Tag.FTAG_ISDAZED;
          if eq dazeTag 69; # Make sure unit already have daze debuff
            return;
          end;


          unit.getRuleArmor armor_rule;
          armor_rule.getTag susceptibility Tag.FTAG_FLASHBANG_RESISTANCE;
          battle_game.randomRange applyChance 1 100; #calculate random chance for debuff apply
          if gt susceptibility applyChance; # check if target resist daze
            return;
          end;

          set dazeTag 69; #set dazed tag
          unit.setTag Tag.FTAG_ISDAZED dazeTag;
          battle_game.getAnimFrame animFrame;
          unit.setTag Tag.LAST_HIT_FRAME animFrame;

            unit.Stats.getTimeUnits statValue; #remember original TimeUnits stat
            unit.setTag Tag.FTAG_DAZE_ORIGINAL_TIMEUNITS statValue;
            div statValue 2; #calculate TimeUnits debuff, deviding it by 2
            unit.Stats.setTimeUnits statValue; #apply debuff

            unit.Stats.getReactions statValue; #remember original Reactions stat
            unit.setTag Tag.FTAG_DAZE_ORIGINAL_REACTIONS statValue;
            battle_game.randomRange debuffValue 25 35; #calculate random, 25-35 for Reactions
            muldiv debuffValue dazeValue 100; #calculate debuff
            sub statValue debuffValue;
            unit.Stats.setReactions statValue; #apply Reactions  debuff

            unit.Stats.getFiring statValue; #remember original Firing stat
            unit.setTag Tag.FTAG_DAZE_ORIGINAL_FIRING statValue;
            battle_game.randomRange debuffValue 20 30; #calculate random, 20-30 for Firing
            muldiv debuffValue dazeValue 100; #calculate debuff
            sub statValue debuffValue;
            unit.Stats.setFiring statValue; #apply debuff

            unit.Stats.getThrowing statValue; #remember original Throwing stat
            unit.setTag Tag.FTAG_DAZE_ORIGINAL_THROWING statValue;
            battle_game.randomRange debuffValue 20 30; #calculate random, 20-30 for Throwing
            muldiv debuffValue dazeValue 100; #calculate debuff
            sub statValue debuffValue;
            unit.Stats.setThrowing statValue; #apply debuff

            unit.Stats.getMelee statValue; #remember original Melee stat
            unit.setTag Tag.FTAG_DAZE_ORIGINAL_MELEE statValue;
            battle_game.randomRange debuffValue 10 20; #calculate random, 10-20 for Melee
            muldiv debuffValue dazeValue 100;
            sub statValue debuffValue;
            unit.Stats.setMelee statValue; #apply debuff

            battle_game.getTurn endTurn;
            add endTurn dazeTime; #define end turn for debuff
            unit.setTag Tag.FTAG_DAZE_ENDTURN endTurn;

          return;

      - offset: 0.9 #Poison damage script
        code: |
          var ptr RuleItem itemRuleset;
          #var ptr RuleArmor armor_rule;
          var int poisonTag;
          var int animFrame;
          var int poisonDamage;
          var int poisonTime;
          var int originalPoisonDamage;
          var int originalPoisonTime;
          var int endTurn;

          var int temp;


          damaging_item.getRuleItem itemRuleset; #get poison stats from item
          itemRuleset.getTag poisonDamage Tag.FTAG_POISON_VALUE;
          itemRuleset.getTag poisonTime Tag.FTAG_POISON_TIME;
          debug_log 1 poisonDamage;
          set temp damaging_type;
          if neq temp 8;
            debug_log 4 temp;
            set temp 0;
          end;
          
          add temp poisonDamage;
          if eq temp 0;
            debug_log 5 temp;
            return;
          end;

          # if or eq poisonDamage 0 neq damaging_type 8; # Make sure item has poison effect or attack was chem type
          #   debug_log 5 temp;
          #   return;
          # end;  

          if eq poisonDamage 0;
            set poisonDamage 15; #set default poison damage and time if omitted
            debug_log 2 poisonDamage;
            set poisonTime 3; 
          end;
            
          unit.getTag originalPoisonDamage Tag.FTAG_POISON_DAMAGE;
          if or gt poisonDamage originalPoisonDamage eq poisonDamage originalPoisonDamage;
            unit.setTag Tag.FTAG_POISON_DAMAGE poisonDamage;
            debug_log 3 poisonDamage;
            battle_game.getAnimFrame animFrame;
            battle_game.getTurn endTurn;
            add endTurn poisonTime; #define end turn for DoT
            unit.setTag Tag.FTAG_POISON_ENDTURN endTurn;
          end;

          return;

    hitUnit:
      - offset: 0.1 #Anti-psiker weapon
        code: |
          var ptr RuleItem itemRuleset;
          var int addPower;
          var int psiStrength;

          damaging_item.getRuleItem itemRuleset; #get stats from item
          itemRuleset.getTag addPower Tag.FTAG_TOPSIKER_ADD_POWER;

          if neq addPower 0;
            unit.Stats.getPsiStrength psiStrength;
            mul addPower psiStrength;
            
            div addPower 100;
            #debug_log 2 addPower; #for good
            add power addPower;
          end;

          return power part side;

    newTurnUnit:
      - offset: 3 #Rotting Script
        code: |
          var ptr RuleArmor armorRuleset;
          var int currHealth;
          var int rottingDamage;
          var int rottingMin;
          var int rottingMax;

          unit.getRuleArmor armorRuleset;
          armorRuleset.getTag rottingMin Tag.FTAG_ROTTINGMIN; #get stats from a unit
          armorRuleset.getTag rottingMax Tag.FTAG_ROTTINGMAX;

          # Make sure this doesn't run an extra time when civilians have a turn
          #if eq side 2;
          #  return;
          #end;

          battle_game.randomRange rottingDamage rottingMin rottingMax; #calculate rotting
          unit.Stats.getHealth currHealth; #apply rotting
          sub currHealth rottingDamage;
          unit.Stats.setHealth currHealth;

           return;

      - offset: 3.1 #Poison ongoing check script
        code: |
          var int currTurn;
          var int endTurn;
          var int poisonDamage;
          var int currHealth;

          # Make sure this doesn't run an extra time when civilians have a turn
          if eq side 2;
            return;
          end;

          unit.getTag poisonDamage Tag.FTAG_POISON_DAMAGE;
          unit.getTag endTurn Tag.FTAG_POISON_ENDTURN;

          battle_game.getTurn currTurn;

          if gt poisonDamage 0;
            if eq currTurn endTurn;
              unit.setTag Tag.FTAG_POISON_DAMAGE 0; #cancel tag
            else;
              unit.Stats.getHealth currHealth; #apply poison
              sub currHealth poisonDamage;
              unit.Stats.setHealth currHealth;
            end;
          end;

          return;

      - offset: 4 #Flashbang ongoing check script
        code: |
          var int currTurn;
          var int endTurn;
          var int dazeTag;
          var int originalTimeUnits;
          var int originalReactions;
          var int originalFiring;
          var int originalThrowing;
          var int originalMelee;

          # Make sure this doesn't run an extra time when civilians have a turn
          if eq side 2;
            return;
          end;

          unit.getTag dazeTag Tag.FTAG_ISDAZED;
          unit.getTag endTurn Tag.FTAG_DAZE_ENDTURN;
          unit.getTag originalTimeUnits Tag.FTAG_DAZE_ORIGINAL_TIMEUNITS;
          unit.getTag originalReactions Tag.FTAG_DAZE_ORIGINAL_REACTIONS;
          unit.getTag originalFiring Tag.FTAG_DAZE_ORIGINAL_FIRING;
          unit.getTag originalThrowing Tag.FTAG_DAZE_ORIGINAL_THROWING;
          unit.getTag originalMelee Tag.FTAG_DAZE_ORIGINAL_MELEE;

          battle_game.getTurn currTurn;

          if eq dazeTag 69;
            if eq currTurn endTurn;
              unit.Stats.setTimeUnits originalTimeUnits; #revent debuff
              unit.Stats.setReactions originalReactions; 
              unit.Stats.setFiring originalFiring; 
              unit.Stats.setThrowing originalThrowing; 
              unit.Stats.setMelee originalMelee; 
              unit.setTag Tag.FTAG_ISDAZED 0; #cancel tag
            end;
          end;

          return;

    recolorUnitSprite:
      - offset: 10 #handle srite recoloring when unit become dazed
        code: |
          var int frame;
          var int temp;
          
          unit.getTag frame Tag.LAST_HIT_FRAME;
            if neq frame 0;
              sub frame anim_frame;
              if gt frame -14; #only 14 frames after hit have changed color
                set temp anim_frame;
                wavegen_tri temp 16 16 6;
                mul temp -1;
                add temp 6; #8;
                add_shade new_pixel temp;
                #set_color new_pixel 2; #14: silver 5:white or 2:red color
              end;
            end; 
          return new_pixel;

      # - offset: 10 #in case of emergency
      #   code: |
      #     var int color;
      #     var int temp;
      #     get_color color new_pixel;
      #         unit.getTag temp Tag.LAST_HIT_FRAME;
      #         if gt temp 0;
      #           set temp anim_frame;
      #           wavegen_tri temp 16 16 15;
      #           mul temp -1;
      #           add temp 4; #8;
      #           add_shade new_pixel temp;
      #         end;
      #     return new_pixel;